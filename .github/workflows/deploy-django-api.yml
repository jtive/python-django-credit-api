name: Deploy Django Personal Info API to AWS App Runner

on:
  push:
    branches:
      - main
    paths:
      - 'python-credit-api/**'
      - '.github/workflows/deploy-django-api.yml'

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: personal-info-django-api
  SERVICE_NAME: personal-info-django-api
  PROJECT_PATH: python-credit-api

jobs:
  type-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd $PROJECT_PATH
          pip install -r requirements.txt
          pip install -r requirements-mypy.txt
      
      - name: Run mypy type checking
        run: |
          cd $PROJECT_PATH
          mypy --config-file mypy-basic.ini api/
      
      - name: Run Django system checks
        run: |
          cd $PROJECT_PATH
          python manage.py check

  deploy:
    runs-on: ubuntu-latest
    needs: type-check
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository
        run: |
          # Create Django API repository
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
          
          # Set repository policy to allow App Runner access
          ROLE_ARN="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/AppRunnerECRAccessRole2"
          
          # Django API repository policy
          aws ecr set-repository-policy \
            --repository-name $ECR_REPOSITORY \
            --region $AWS_REGION \
            --policy-text '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AppRunnerAccess",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "'$ROLE_ARN'"
                  },
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability"
                  ]
                }
              ]
            }' || echo "Django API repository policy already set"
      
      - name: Build and push Django API Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Navigate to the Django project directory
          cd $PROJECT_PATH
          
          # Build and push Django API image using production Dockerfile
          docker build -f Dockerfile.production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Create or update App Runner service
        run: |
          # Check if App Runner service exists
          SERVICE_EXISTS=$(aws apprunner describe-service --service-arn "arn:aws:apprunner:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:service/$SERVICE_NAME" --region $AWS_REGION 2>/dev/null || echo "false")
          
          if [ "$SERVICE_EXISTS" = "false" ]; then
            echo "Creating new App Runner service..."
            
            # Create App Runner service
            aws apprunner create-service \
              --service-name $SERVICE_NAME \
              --region $AWS_REGION \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "'$ECR_REGISTRY/$ECR_REPOSITORY:latest'",
                  "ImageConfiguration": {
                    "Port": "8000",
                    "RuntimeEnvironmentVariables": {
                      "SECRET_KEY": "'${{ secrets.DJANGO_SECRET_KEY }}'",
                      "DEBUG": "False",
                      "ALLOWED_HOSTS": "*",
                      "DB_HOST": "'${{ secrets.DB_HOST }}'",
                      "DB_NAME": "'${{ secrets.DB_NAME }}'",
                      "DB_USERNAME": "'${{ secrets.DB_USERNAME }}'",
                      "DB_PASSWORD": "'${{ secrets.DB_PASSWORD }}'",
                      "DB_PORT": "'${{ secrets.DB_PORT }}'"
                    }
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AutoDeploymentsEnabled": true
              }' \
              --instance-configuration '{
                "Cpu": "0.25 vCPU",
                "Memory": "0.5 GB"
              }' \
              --health-check-configuration '{
                "Protocol": "HTTP",
                "Path": "/api/health/",
                "Interval": 10,
                "Timeout": 5,
                "HealthyThreshold": 1,
                "UnhealthyThreshold": 5
              }'
          else
            echo "Updating existing App Runner service..."
            
            # Update App Runner service
            aws apprunner update-service \
              --service-arn "arn:aws:apprunner:$AWS_REGION:${{ secrets.AWS_ACCOUNT_ID }}:service/$SERVICE_NAME" \
              --region $AWS_REGION \
              --source-configuration '{
                "ImageRepository": {
                  "ImageIdentifier": "'$ECR_REGISTRY/$ECR_REPOSITORY:latest'",
                  "ImageConfiguration": {
                    "Port": "8000",
                    "RuntimeEnvironmentVariables": {
                      "SECRET_KEY": "'${{ secrets.DJANGO_SECRET_KEY }}'",
                      "DEBUG": "False",
                      "ALLOWED_HOSTS": "*",
                      "DB_HOST": "'${{ secrets.DB_HOST }}'",
                      "DB_NAME": "'${{ secrets.DB_NAME }}'",
                      "DB_USERNAME": "'${{ secrets.DB_USERNAME }}'",
                      "DB_PASSWORD": "'${{ secrets.DB_PASSWORD }}'",
                      "DB_PORT": "'${{ secrets.DB_PORT }}'"
                    }
                  },
                  "ImageRepositoryType": "ECR"
                },
                "AutoDeploymentsEnabled": true
              }'
          fi
      
      - name: Wait for service to be ready
        run: |
          echo "Waiting for App Runner service to be ready..."
          aws apprunner wait service-updated \
            --service-arn "arn:aws:apprunner:$AWS_REGION:486151888818:service/$SERVICE_NAME" \
            --region $AWS_REGION
      
      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(aws apprunner describe-service \
            --service-arn "arn:aws:apprunner:$AWS_REGION:486151888818:service/$SERVICE_NAME" \
            --region $AWS_REGION \
            --query 'Service.ServiceUrl' \
            --output text)
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service URL: $SERVICE_URL"
      
      - name: Run database migrations
        run: |
          # Get the service URL
          SERVICE_URL=${{ steps.get-url.outputs.service_url }}
          
          # Wait a bit for the service to be fully ready
          sleep 30
          
          # Run migrations using Django management command
          # Note: This would typically be done as part of the container startup
          echo "Database migrations should be handled in the container startup process"
      
      - name: Create deployment summary
        run: |
          SERVICE_URL=${{ steps.get-url.outputs.service_url }}
          echo "## ðŸš€ Django Personal Info API Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Service Name:** \`$SERVICE_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Service URL:** [$SERVICE_URL]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image:** \`$ECR_REGISTRY/$ECR_REPOSITORY:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** \`$AWS_REGION\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”— API Endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** [$SERVICE_URL/api/health/]($SERVICE_URL/api/health/)" >> $GITHUB_STEP_SUMMARY
          echo "- **API Documentation:** [$SERVICE_URL/api/]($SERVICE_URL/api/)" >> $GITHUB_STEP_SUMMARY
          echo "- **Persons:** [$SERVICE_URL/api/person/]($SERVICE_URL/api/person/)" >> $GITHUB_STEP_SUMMARY
          echo "- **Addresses:** [$SERVICE_URL/api/address/]($SERVICE_URL/api/address/)" >> $GITHUB_STEP_SUMMARY
          echo "- **Credit Cards:** [$SERVICE_URL/api/creditcard/]($SERVICE_URL/api/creditcard/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "The Django API has been successfully deployed to AWS App Runner and is ready to handle requests!" >> $GITHUB_STEP_SUMMARY
