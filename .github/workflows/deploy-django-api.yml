name: Test and Build Django Personal Info API

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!.github/workflows/test.yml'

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: personal-info-django-api

jobs:
  type-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-mypy.txt
      
      - name: Run mypy type checking
        run: |
          mypy --config-file mypy-basic.ini api/
      
      - name: Run Django system checks
        run: |
          python manage.py check

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_personalinfo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-mypy.txt
          pip install -r requirements-dev.txt
      
      - name: Set up environment variables
        run: |
          echo "SECRET_KEY=test-secret-key-for-github-actions" >> .env
          echo "DEBUG=True" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_NAME=test_personalinfo" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_SSLMODE=disable" >> .env
      
      - name: Run Django system checks
        run: |
          python manage.py check
      
      - name: Run database migrations
        run: |
          python manage.py migrate
      
      - name: Run Django tests
        run: |
          python manage.py test
      
      - name: Run database migrations
        run: |
          python manage.py migrate
      
      - name: Test API endpoints
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10
          curl -f http://localhost:8000/api/health/ || exit 1
          curl -f http://localhost:8000/api/health/ready/ || exit 1

  deploy:
    runs-on: ubuntu-latest
    needs: [type-check, test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository
        run: |
          # Create Django API repository if it doesn't exist
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION
      
      - name: Build and push Django API Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push Django API image using production Dockerfile
          docker build -f Dockerfile.production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Create deployment summary
        run: |
          echo "## 🚀 Django Personal Info API Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **ECR Repository:** \`$ECR_REPOSITORY\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image:** \`$ECR_REGISTRY/$ECR_REPOSITORY:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** \`$AWS_REGION\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Image Ready" >> $GITHUB_STEP_SUMMARY
          echo "The Django API Docker image has been successfully built and pushed to ECR!" >> $GITHUB_STEP_SUMMARY
          echo "You can now manually deploy it to your preferred service (App Runner, ECS, etc.)." >> $GITHUB_STEP_SUMMARY
